/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CapaDiseño;

import CapaNegocio.CCuota;
import CapaNegocio.CHistorialClinico;
import CapaNegocio.CImagenes;
import CapaNegocio.Errores;
import Encapsulamiento.ECuota;
import Encapsulamiento.EHistorial;
import Encapsulamiento.EImagenes;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author vladimir
 */
public class Tratamientos extends javax.swing.JDialog {

    /**
     * Creates new form Tratamientos
     */
    public Tratamientos() {
        initComponents();
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Imagen/Logo.png"));
        setIconImage(icon);
//        ImageIcon imgIcon = new ImageIcon(getClass().getResource("/Imagen/wallpaper.jpg"));
//        Image imgEscalada = imgIcon.getImage().getScaledInstance(lbImagen.getWidth(),
//                lbImagen.getHeight(), Image.SCALE_SMOOTH);
//        Icon iconoEscalado = new ImageIcon(imgEscalada);
//        lbImagen.setIcon(iconoEscalado);

        this.setModal(true);
        this.setLocationRelativeTo(null);
        txtPrecioPactado.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();

                // Verificar si la tecla pulsada no es un digito
                if (((caracter < '0')
                        || (caracter > '9'))
                        && (caracter != '\b' /*corresponde a BACK_SPACE*/) && (caracter != '.')) {
                    e.consume();  // ignorar el evento de teclado
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelLimpieza1 = new CapaDiseño.PanelLimpieza();
        panelEndodoncia1 = new CapaDiseño.PanelEndodoncia();
        panelExodoncia1 = new CapaDiseño.PanelExodoncia();
        odontograma1 = new CapaDiseño.Odontograma();
        jPanel1 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnCuota = new javax.swing.JButton();
        txtIdCrearH = new javax.swing.JTextField();
        lbNombre = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lbFechaH = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbNroHistorial = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbMotivo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPrecioPactado = new javax.swing.JTextField();
        txtIdCliente = new javax.swing.JTextField();
        btnImagen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tratamientos, odontograma y cuotas");
        setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        setMinimumSize(new java.awt.Dimension(1012, 700));
        setModal(true);
        setResizable(false);
        getContentPane().setLayout(null);

        jTabbedPane1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jTabbedPane1.addTab("Tratamiento I", panelLimpieza1);
        jTabbedPane1.addTab("Tratamiento II", panelEndodoncia1);
        jTabbedPane1.addTab("Tratamiento III", panelExodoncia1);
        jTabbedPane1.addTab("Odontograma", odontograma1);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 122, 1012, 578);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Datos de Mi Historial", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10), new java.awt.Color(0, 102, 102))); // NOI18N
        jPanel1.setOpaque(false);

        btnGuardar.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuardarMouseClicked(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnActualizarMouseClicked(evt);
            }
        });

        btnCuota.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnCuota.setText("Cuotas");
        btnCuota.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCuotaMouseClicked(evt);
            }
        });

        lbNombre.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lbNombre.setForeground(new java.awt.Color(102, 0, 0));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("Fecha de Historial Clinico:");

        lbFechaH.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lbFechaH.setForeground(new java.awt.Color(102, 0, 0));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 153));
        jLabel2.setText("Nro de Historial:");

        lbNroHistorial.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lbNroHistorial.setForeground(new java.awt.Color(102, 0, 0));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 153));
        jLabel3.setText("Motivo:");

        lbMotivo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lbMotivo.setForeground(new java.awt.Color(102, 0, 0));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("Precio Pactado S/:");

        txtPrecioPactado.setEditable(false);
        txtPrecioPactado.setBackground(new java.awt.Color(204, 0, 0));
        txtPrecioPactado.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtPrecioPactado.setForeground(new java.awt.Color(255, 255, 255));
        txtPrecioPactado.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 0, 0), 1, true));

        btnImagen.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnImagen.setText("Imagen");
        btnImagen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnImagenMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnImagen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCuota)
                        .addGap(30, 30, 30)
                        .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdCrearH, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(lbFechaH, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(lbNroHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtPrecioPactado, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar)
                        .addGap(53, 53, 53))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbFechaH, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbNroHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(25, Short.MAX_VALUE)
                        .addComponent(btnImagen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCuota)
                        .addComponent(btnGuardar)
                        .addComponent(btnActualizar)
                        .addComponent(txtIdCrearH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPrecioPactado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbMotivo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1048, 110);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCuotaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCuotaMouseClicked
        ECuota.setIdCliente(Tratamientos.txtIdCliente.getText());
        Cuotas c = new Cuotas();
        c.txtPrecioPactado.setText(txtPrecioPactado.getText());
        CCuota.Listar();
        c.setLocationRelativeTo(null);
        c.setVisible(true);
    }//GEN-LAST:event_btnCuotaMouseClicked

    private void btnGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardarMouseClicked
        int seleccion1 = JOptionPane.showOptionDialog(null, "¿seguro decea guardar ?"/*componente padre*/, //Mensaje
                "Seleccione una opción", // Título
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, // null para icono por defecto.
                new Object[]{"Si", "No"}, // null para YES, NO y CANCEL
                "Si");
        if (seleccion1 != -1) {
            if ((seleccion1 + 1) == 1) {
                try {
                    if (CHistorialClinico.VerificarExisteIdHistorialClinicoEnHistorial_clinico(Integer.parseInt(txtIdCrearH.getText())) == false) {
                        VerificarSeleccionDatos();
                        if (CHistorialClinico.GuardarHistorial()) {
                            // RecuperarPrecio del cliente en base de datos y marcarlos
                            ResultSet rs1 = CHistorialClinico.ListarTramiento(Integer.parseInt(txtIdCrearH.getText()));
                            EHistorial.RecuperarPreciosCliente(rs1);
                            //fin de recuperacion
                            Errores.Exito("Se guardo correctamente el historial clinico");

                        } else {
                            Errores.Error("No se puede guardar el historial clinico,\n Solo necesita actualizar");
                        }
                    } else {
                        Errores.Error("No se puede guardar el historial clinico,\n Solo necesita actualizar");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Tratamientos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_btnGuardarMouseClicked

    private void btnActualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnActualizarMouseClicked
        int seleccion1 = JOptionPane.showOptionDialog(null, "¿seguro decea actualizar ?"/*componente padre*/, //Mensaje
                "Seleccione una opción", // Título
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, // null para icono por defecto.
                new Object[]{"Si", "No"}, // null para YES, NO y CANCEL
                "Si");
        if (seleccion1 != -1) {
            if ((seleccion1 + 1) == 1) {
                if (CHistorialClinico.VerificarExisteIdHistorialClinicoEnHistorial_clinico(Integer.parseInt(txtIdCrearH.getText())) == true) {
                    VerificarSeleccionDatos();
                    if (CHistorialClinico.ActualizarHistorial()) {
                        try {
                            ResultSet rs1 = CHistorialClinico.ListarTramiento(Integer.parseInt(txtIdCrearH.getText()));
                            EHistorial.RecuperarPreciosCliente(rs1);
                            //fin de recuperacion
                            Errores.Exito("Se actualizo correctamente el historial clinico");
                        } catch (SQLException ex) {
                            Logger.getLogger(Tratamientos.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        Errores.Error("No se puede actualizar el historial clinico\n Necesita Guardar");
                    }
                } else {
                    Errores.Error("No se puede actualizar el historial clinico\n Necesita Guardar");
                }
            }
        }
    }//GEN-LAST:event_btnActualizarMouseClicked

    private void btnImagenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImagenMouseClicked
        EImagenes.setIdCliente(Tratamientos.txtIdCliente.getText());
        Imagen imagen=new  Imagen();
        CImagenes.Listar();
        imagen.setLocationRelativeTo(null);
        imagen.setVisible(true);
    }//GEN-LAST:event_btnImagenMouseClicked
    public void VerificarSeleccionDatos() {
        // PRESIONO SI
        if (PanelLimpieza.rbOpcion1.isSelected() == true) {
            EHistorial.setCepillaje(Double.parseDouble(PanelLimpieza.txtPrecioNormal1.getText()));
        } else {
            if (PanelLimpieza.txtPrecioParcial1.getText().equals("")) {
                EHistorial.setCepillaje(0);
            } else {
                EHistorial.setCepillaje(Double.parseDouble(PanelLimpieza.txtPrecioParcial1.getText()));
            }
        }
        if (PanelLimpieza.rbOpcion2.isSelected() == true) {
            EHistorial.setCepilladoProfilaxico(Double.parseDouble(PanelLimpieza.txtPrecioNormal2.getText()));
        } else {
            if (PanelLimpieza.txtPrecioParcial2.getText().equals("")) {
                EHistorial.setCepilladoProfilaxico(0);
            } else {
                EHistorial.setCepilladoProfilaxico(Double.parseDouble(PanelLimpieza.txtPrecioParcial2.getText()));
            }

        }
        if (PanelLimpieza.rbOpcion3.isSelected() == true) {
            EHistorial.setFluorizacion(Double.parseDouble(PanelLimpieza.txtPrecioNormal3.getText()));
        } else {
            if (PanelLimpieza.txtPrecioParcial3.getText().equals("")) {
                EHistorial.setFluorizacion(0);
            } else {
                EHistorial.setFluorizacion(Double.parseDouble(PanelLimpieza.txtPrecioParcial3.getText()));
            }

        }
        if (PanelLimpieza.rbOpcion4.isSelected() == true) {
            EHistorial.setBanqueamiento(Double.parseDouble(PanelLimpieza.txtPrecioNormal4.getText()));
        } else {
            if (PanelLimpieza.txtPrecioParcial4.getText().equals("")) {
                EHistorial.setBanqueamiento(0);
            } else {
                EHistorial.setBanqueamiento(Double.parseDouble(PanelLimpieza.txtPrecioParcial4.getText()));
            }

        }
        if (Double.parseDouble(PanelLimpieza.txtPieza1.getText()) >= 0) {
            EHistorial.setCarieSimple(Double.parseDouble(PanelLimpieza.txtPrecioNormal5.getText()));
            EHistorial.setPieza1(Double.parseDouble(PanelLimpieza.txtPieza1.getText()));
        }
        if (Double.parseDouble(PanelLimpieza.txtPieza2.getText()) >= 0) {
            EHistorial.setCarieCompuesta(Double.parseDouble(PanelLimpieza.txtPrecioNormal6.getText()));
            EHistorial.setPieza2(Double.parseDouble(PanelLimpieza.txtPieza2.getText()));
        }
        if (Double.parseDouble(PanelLimpieza.txtPieza3.getText()) >= 0) {
            EHistorial.setCarieRecompuesta(Double.parseDouble(PanelLimpieza.txtPrecioNormal7.getText()));
            EHistorial.setPieza3(Double.parseDouble(PanelLimpieza.txtPieza3.getText()));
        }
        // tratamiento 2

        if (PanelEndodoncia.rbOpcion1.isSelected() == true) {
            EHistorial.setEndoMultiRadicular(Double.parseDouble(PanelEndodoncia.txtPrecioNormal1.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial1.getText().equals("")) {
                EHistorial.setEndoMultiRadicular(0);
            } else {
                EHistorial.setEndoMultiRadicular(Double.parseDouble(PanelEndodoncia.txtPrecioParcial1.getText()));
            }
        }
        if (PanelEndodoncia.rbOpcion2.isSelected() == true) {
            EHistorial.setEndoUniRadicular(Double.parseDouble(PanelEndodoncia.txtPrecioNormal2.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial2.getText().equals("")) {
                EHistorial.setEndoUniRadicular(0);
            } else {
                EHistorial.setEndoUniRadicular(Double.parseDouble(PanelEndodoncia.txtPrecioParcial2.getText()));
            }

        }
        if (PanelEndodoncia.rbOpcion3.isSelected() == true) {
            EHistorial.setBioPulpectomia(Double.parseDouble(PanelEndodoncia.txtPrecioNormal3.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial3.getText().equals("")) {
                EHistorial.setBioPulpectomia(0);
            } else {
                EHistorial.setBioPulpectomia(Double.parseDouble(PanelEndodoncia.txtPrecioParcial3.getText()));
            }

        }
        if (PanelEndodoncia.rbOpcion4.isSelected() == true) {
            EHistorial.setNecroPulpectomia(Double.parseDouble(PanelEndodoncia.txtPrecioNormal4.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial4.getText().equals("")) {
                EHistorial.setNecroPulpectomia(0);
            } else {
                EHistorial.setNecroPulpectomia(Double.parseDouble(PanelEndodoncia.txtPrecioParcial4.getText()));
            }

        }
        if (PanelEndodoncia.rbOpcion5.isSelected() == true) {
            EHistorial.setOrtodonciaI(Double.parseDouble(PanelEndodoncia.txtPrecioNormal5.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial5.getText().equals("")) {
                EHistorial.setOrtodonciaI(0);
            } else {
                EHistorial.setOrtodonciaI(Double.parseDouble(PanelEndodoncia.txtPrecioParcial5.getText()));
            }

        }
        if (PanelEndodoncia.rbOpcion6.isSelected() == true) {
            EHistorial.setOrtodonciaII(Double.parseDouble(PanelEndodoncia.txtPrecioNormal6.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial6.getText().equals("")) {
                EHistorial.setOrtodonciaII(0);
            } else {
                EHistorial.setOrtodonciaII(Double.parseDouble(PanelEndodoncia.txtPrecioParcial6.getText()));
            }

        }
        if (Double.parseDouble(PanelEndodoncia.txtPieza1.getText()) >= 0) {
            EHistorial.setRecementacion(Double.parseDouble(PanelEndodoncia.txtPrecioNormal7.getText()));
            EHistorial.setPieza4(Double.parseDouble(PanelEndodoncia.txtPieza1.getText()));
        }

        if (PanelEndodoncia.rbOpcion8.isSelected() == true) {
            EHistorial.setSellantes(Double.parseDouble(PanelEndodoncia.txtPrecioNormal8.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial8.getText().equals("")) {
                EHistorial.setSellantes(0);
            } else {
                EHistorial.setSellantes(Double.parseDouble(PanelEndodoncia.txtPrecioParcial8.getText()));
            }

        }
        if (PanelEndodoncia.rbOpcion9.isSelected() == true) {
            EHistorial.setBarniz(Double.parseDouble(PanelEndodoncia.txtPrecioNormal9.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial9.getText().equals("")) {
                EHistorial.setBarniz(0);
            } else {
                EHistorial.setBarniz(Double.parseDouble(PanelEndodoncia.txtPrecioParcial9.getText()));
            }

        }
        if (PanelEndodoncia.rbOpcion10.isSelected() == true) {
            EHistorial.setCariostatico(Double.parseDouble(PanelEndodoncia.txtPrecioNormal10.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial10.getText().equals("")) {
                EHistorial.setCariostatico(0);
            } else {
                EHistorial.setCariostatico(Double.parseDouble(PanelEndodoncia.txtPrecioParcial10.getText()));
            }

        }
        if (PanelEndodoncia.rbOpcion11.isSelected() == true) {
            EHistorial.setFibraVidrio(Double.parseDouble(PanelEndodoncia.txtPrecioNormal11.getText()));
        } else {
            if (PanelEndodoncia.txtPrecioParcial11.getText().equals("")) {
                EHistorial.setFibraVidrio(0);
            } else {
                EHistorial.setFibraVidrio(Double.parseDouble(PanelEndodoncia.txtPrecioParcial11.getText()));
            }

        }
        //tratamiento 3
        if (PanelExodoncia.rbOpcion1.isSelected() == true) {
            EHistorial.setRaiz(Double.parseDouble(PanelExodoncia.txtPrecioNormal1.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial1.getText().equals("")) {
                EHistorial.setRaiz(0);
            } else {
                EHistorial.setRaiz(Double.parseDouble(PanelExodoncia.txtPrecioParcial1.getText()));
            }
        }
        if (PanelExodoncia.rbOpcion2.isSelected() == true) {
            EHistorial.setPosicionNormal(Double.parseDouble(PanelExodoncia.txtPrecioNormal2.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial2.getText().equals("")) {
                EHistorial.setPosicionNormal(0);
            } else {
                EHistorial.setPosicionNormal(Double.parseDouble(PanelExodoncia.txtPrecioParcial2.getText()));
            }

        }
        if (PanelExodoncia.rbOpcion3.isSelected() == true) {
            EHistorial.setMolarRecta(Double.parseDouble(PanelExodoncia.txtPrecioNormal3.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial3.getText().equals("")) {
                EHistorial.setMolarRecta(0);
            } else {
                EHistorial.setMolarRecta(Double.parseDouble(PanelExodoncia.txtPrecioParcial3.getText()));
            }

        }
        if (PanelExodoncia.rbOpcion4.isSelected() == true) {
            EHistorial.setMolarQuirurgica(Double.parseDouble(PanelExodoncia.txtPrecioNormal4.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial4.getText().equals("")) {
                EHistorial.setMolarQuirurgica(0);
            } else {
                EHistorial.setMolarQuirurgica(Double.parseDouble(PanelExodoncia.txtPrecioParcial4.getText()));
            }

        }
        if (PanelExodoncia.rbOpcion5.isSelected() == true) {
            EHistorial.setMetal(Double.parseDouble(PanelExodoncia.txtPrecioNormal5.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial5.getText().equals("")) {
                EHistorial.setMetal(0);
            } else {
                EHistorial.setMetal(Double.parseDouble(PanelExodoncia.txtPrecioParcial5.getText()));
            }

        }
        if (PanelExodoncia.rbOpcion6.isSelected() == true) {
            EHistorial.setIvocron(Double.parseDouble(PanelExodoncia.txtPrecioNormal6.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial6.getText().equals("")) {
                EHistorial.setIvocron(0);
            } else {
                EHistorial.setIvocron(Double.parseDouble(PanelExodoncia.txtPrecioParcial6.getText()));
            }

        }
        if (PanelExodoncia.rbOpcion7.isSelected() == true) {
            EHistorial.setBelga(Double.parseDouble(PanelExodoncia.txtPrecioNormal7.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial7.getText().equals("")) {
                EHistorial.setBelga(0);
            } else {
                EHistorial.setBelga(Double.parseDouble(PanelExodoncia.txtPrecioParcial7.getText()));
            }

        }
        if (PanelExodoncia.rbOpcion8.isSelected() == true) {
            EHistorial.setPorcelana(Double.parseDouble(PanelExodoncia.txtPrecioNormal8.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial8.getText().equals("")) {
                EHistorial.setPorcelana(0);
            } else {
                EHistorial.setPorcelana(Double.parseDouble(PanelExodoncia.txtPrecioParcial8.getText()));
            }

        }
        if (PanelExodoncia.rbOpcion9.isSelected() == true) {
            EHistorial.setCarrillas(Double.parseDouble(PanelExodoncia.txtPrecioNormal9.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial9.getText().equals("")) {
                EHistorial.setCarrillas(0);
            } else {
                EHistorial.setCarrillas(Double.parseDouble(PanelExodoncia.txtPrecioParcial9.getText()));
            }

        }
        if (Double.parseDouble(PanelExodoncia.txtPieza1.getText()) >= 0) {
            EHistorial.setPuente1(Double.parseDouble(PanelExodoncia.txtPrecioNormal10.getText()));
            EHistorial.setPieza5(Double.parseDouble(PanelExodoncia.txtPieza1.getText()));
        }
        if (Double.parseDouble(PanelExodoncia.txtPieza2.getText()) >= 0) {
            EHistorial.setPuente2(Double.parseDouble(PanelExodoncia.txtPrecioNormal11.getText()));
            EHistorial.setPieza6(Double.parseDouble(PanelExodoncia.txtPieza2.getText()));
        }

        if (PanelExodoncia.rbOpcion12.isSelected() == true) {
            EHistorial.setBaseMetalica(Double.parseDouble(PanelExodoncia.txtPrecioNormal12.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial12.getText().equals("")) {
                EHistorial.setBaseMetalica(0);
            } else {
                EHistorial.setBaseMetalica(Double.parseDouble(PanelExodoncia.txtPrecioParcial12.getText()));
            }

        }

        if (PanelExodoncia.rbOpcion13.isSelected() == true) {
            EHistorial.setAcrilico(Double.parseDouble(PanelExodoncia.txtPrecioNormal13.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial13.getText().equals("")) {
                EHistorial.setAcrilico(0);
            } else {
                EHistorial.setAcrilico(Double.parseDouble(PanelExodoncia.txtPrecioParcial13.getText()));
            }

        }
        if (PanelExodoncia.rbOpcion14.isSelected() == true) {
            EHistorial.setProtesisTotal(Double.parseDouble(PanelExodoncia.txtPrecioNormal14.getText()));
        } else {
            if (PanelExodoncia.txtPrecioParcial14.getText().equals("")) {
                EHistorial.setProtesisTotal(0);
            } else {
                EHistorial.setProtesisTotal(Double.parseDouble(PanelExodoncia.txtPrecioParcial14.getText()));
            }

        }

        EHistorial.setDientes(Odontograma.Dientes);
        if (Odontograma.txtMasInformacion.getText().equals("")) {
            EHistorial.setMasInformacion("No tiene ninguna especificacion");
        } else {
            EHistorial.setMasInformacion(Odontograma.txtMasInformacion.getText());
        }

        //obtiene el precio de los tratamientos y envia en id del cliente para poder actuañizar o guardar
        precioPactado();
        EHistorial.setIdCrearHistorial(Integer.parseInt(txtIdCrearH.getText()));

    }

    public void precioPactado() {
        double[] Tratamiento = new double[32];
        Tratamiento[0] = EHistorial.getCepillaje();
        Tratamiento[1] = EHistorial.getCepilladoProfilaxico();
        Tratamiento[2] = EHistorial.getFluorizacion();
        Tratamiento[3] = EHistorial.getBanqueamiento();
        Tratamiento[4] = EHistorial.getPieza1() * EHistorial.getCarieSimple();
        Tratamiento[5] = EHistorial.getPieza2() * EHistorial.getCarieCompuesta();
        Tratamiento[6] = EHistorial.getPieza3() * EHistorial.getCarieRecompuesta();

        Tratamiento[7] = EHistorial.getEndoMultiRadicular();
        Tratamiento[8] = EHistorial.getEndoUniRadicular();
        Tratamiento[9] = EHistorial.getBioPulpectomia();
        Tratamiento[10] = EHistorial.getNecroPulpectomia();
        Tratamiento[11] = EHistorial.getOrtodonciaI();
        Tratamiento[12] = EHistorial.getOrtodonciaII();
        Tratamiento[13] = EHistorial.getPieza4() * EHistorial.getRecementacion();
        Tratamiento[14] = EHistorial.getSellantes();
        Tratamiento[15] = EHistorial.getBarniz();
        Tratamiento[16] = EHistorial.getCariostatico();
        Tratamiento[17] = EHistorial.getFibraVidrio();

        Tratamiento[18] = EHistorial.getRaiz();
        Tratamiento[19] = EHistorial.getPosicionNormal();
        Tratamiento[20] = EHistorial.getMolarRecta();
        Tratamiento[21] = EHistorial.getMolarQuirurgica();
        Tratamiento[22] = EHistorial.getMetal();
        Tratamiento[23] = EHistorial.getIvocron();
        Tratamiento[24] = EHistorial.getBelga();
        Tratamiento[25] = EHistorial.getPorcelana();
        Tratamiento[26] = EHistorial.getCarrillas();
        Tratamiento[27] = EHistorial.getPieza5() * EHistorial.getPuente1();
        Tratamiento[28] = EHistorial.getPieza6() * EHistorial.getPuente2();
        Tratamiento[29] = EHistorial.getBaseMetalica();
        Tratamiento[30] = EHistorial.getAcrilico();
        Tratamiento[31] = EHistorial.getProtesisTotal();
        Double Total = 0.0;
        for (int i = 0; i < Tratamiento.length; i++) {
            Total = Total + Tratamiento[i];
        }
        txtPrecioPactado.setText(String.valueOf(Total));
        EHistorial.setPrecioPactado(Total);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tratamientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tratamientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tratamientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tratamientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tratamientos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnActualizar;
    public static javax.swing.JButton btnCuota;
    public static javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImagen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JLabel lbFechaH;
    public static javax.swing.JLabel lbMotivo;
    public static javax.swing.JLabel lbNombre;
    public static javax.swing.JLabel lbNroHistorial;
    private CapaDiseño.Odontograma odontograma1;
    private CapaDiseño.PanelEndodoncia panelEndodoncia1;
    private CapaDiseño.PanelExodoncia panelExodoncia1;
    private CapaDiseño.PanelLimpieza panelLimpieza1;
    public static javax.swing.JTextField txtIdCliente;
    public static javax.swing.JTextField txtIdCrearH;
    public static javax.swing.JTextField txtPrecioPactado;
    // End of variables declaration//GEN-END:variables
}
